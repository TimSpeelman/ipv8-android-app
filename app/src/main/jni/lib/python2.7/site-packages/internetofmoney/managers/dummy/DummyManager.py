from twisted.internet import reactor
from twisted.internet.defer import succeed, fail
from twisted.internet.task import deferLater
from twisted.python.failure import Failure

from internetofmoney.RequiredField import RequiredField
from internetofmoney.RequiredInput import RequiredInput
from internetofmoney.managers.BaseManager import BaseManager
from internetofmoney.utils.exceptions import NotRegisteredException


class DummyManager(BaseManager):

    def __init__(self, database, cache_dir='cache'):
        super(DummyManager, self).__init__(database, cache_dir)

        self.logged_in = False
        self.balance = 750
        self.transactions = []

    def persistent_storage_filename(self):
        return '%s.json' % self.get_bank_id()

    def is_logged_in(self):
        return self.logged_in

    @staticmethod
    def get_payment_info_fields():
        """
        Return the fields required for making a payment in a Dummy manager.
        """
        amount_field = RequiredField('amount', 'text', 'Please enter the amount of money to transfer')
        destination_field = RequiredField('destination_account', 'text', 'Please enter the destination dummy IBAN')
        description_field = RequiredField('description', 'text', 'Please an optional payment description')
        return [amount_field, destination_field, description_field]

    def register(self):
        self.database.log_event('info', 'Starting registration sequence for %s' % self.get_bank_name())

        self.persistent_storage['registered'] = True
        self.save_storage()

        return self.login()  # Immediately login

    def login(self):
        if not self.is_registered():
            return fail(Failure(NotRegisteredException()))

        self.database.log_event('info', 'Starting login sequence for %s' % self.get_bank_name())

        self.logged_in = True
        return succeed(None)

    def get_balance(self):
        self.database.log_event('info', 'Fetching balance for %s, account %s' %
                                (self.get_bank_name(), self.get_address()))
        return self.check_login().addCallback(lambda _: {"available": self.balance, "pending": 0.0, "currency": "EUR"})

    def make_payment(self):
        """
        Initiate a new payment by asking the user for payment details.
        """
        required_input = RequiredInput('dummy_payment_info', DummyManager.get_payment_info_fields())
        return self.input_handler(required_input).addCallback(self.on_entered_payment_details)

    def on_entered_payment_details(self, input):
        return self.perform_payment(float(input['amount']), input['destination_account'], input['description'])

    def perform_payment(self, amount, destination_account, description):
        self.database.log_event('info', 'Starting %s payment with amount %f to %s (description: %s)' %
                                (self.get_bank_name(), amount, destination_account, description))
        self.database.add_transaction('a' * 20, self.get_address(), destination_account, amount, description)
        self.transactions.append({"amount": amount, "from": self.get_address(), "to": destination_account})

        def on_balance(balance):
            if balance['available'] < float(amount):
                return fail(Failure(RuntimeError('Not enough balance!')))
            return 'a' * 20

        return self.check_login().addCallback(lambda _: self.get_balance()).addCallback(on_balance)

    def get_transactions(self):
        self.database.log_event('info', 'Fetching %s transactions of account %s' %
                                (self.get_bank_name(), self.get_address()))
        return self.check_login().addCallback(lambda _: self.transactions)

    def monitor_transactions(self, transaction_id):
        return succeed({"amount": 50, "from": 'a', "to": 'b'})

    def get_address(self):
        raise NotImplementedError('Please implement this method')


class Dummy1Manager(DummyManager):

    def get_bank_name(self):
        return 'Dummy1'

    def get_bank_id(self):
        return 'DUMA'

    def get_address(self):
        return 'NL68DUMA0111111111'


class Dummy2Manager(DummyManager):

    def get_bank_name(self):
        return 'Dummy2'

    def get_bank_id(self):
        return 'DUMB'

    def get_address(self):
        return 'NL06DUMB0111111111'


class Dummy3Manager(DummyManager):

    def get_bank_name(self):
        return 'Dummy3'

    def get_bank_id(self):
        return 'DUMC'

    def get_address(self):
        return 'NL41DUMC0111111111'
