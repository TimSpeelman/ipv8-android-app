#!/usr/bin/python

import os
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto import Random


class INGKeyPair(object):
    """
    This class contains the implementation to encrypt/decrypt data according to a keypair.
    """

    def __init__(self, cache_dir):
        self.cache_dir = cache_dir
        self.public_key = None
        self.private_key = None
        self.pub_key_path = os.path.join(cache_dir, "ing_public_key.key")
        self.priv_key_path = os.path.join(cache_dir, "ing_private_key.key")
        if os.path.isfile(self.pub_key_path):
            self.read_keys()
        else:
            self.generate_keypair()

    def generate_keypair(self, bits=1024):
        """
        Generate an RSA keypair with an exponent of 65537 in PEM format
        param: bits The key length in bits
        Return private key and public key
        """
        new_key = RSA.generate(bits, e=65537)
        self.public_key = new_key.publickey().exportKey("PEM")
        public_key_file = open(self.pub_key_path, 'w')
        public_key_file.write(self.public_key)
        public_key_file.close()

        self.private_key = new_key.exportKey("PEM")
        private_key_file = open(self.priv_key_path, 'w')
        private_key_file.write(self.private_key)
        private_key_file.close()

        self.read_keys()

    def read_keys(self):
        public_key_file = open(self.pub_key_path, 'r')
        self.public_key = RSA.importKey(public_key_file.read())
        public_key_file.close()

        private_key_file = open(self.priv_key_path, 'r')
        self.private_key = RSA.importKey(private_key_file.read())
        private_key_file.close()

    def encrypt(self, plaintext):
        cipher = PKCS1_v1_5.new(self.private_key)
        return cipher.encrypt(plaintext)

    def decrypt(self, ciphertext):
        dsize = SHA.digest_size
        sentinel = Random.new().read(15+dsize)
        cipher = PKCS1_v1_5.new(self.private_key)
        return cipher.decrypt(ciphertext, sentinel)
