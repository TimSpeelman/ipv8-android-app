import random, os


class INGSymmetricKey(object):

    def __init__(self, cache_dir):
        self.key_path = os.path.join(cache_dir, 'ing_symmetric_key.key')
        self.key = None

    def generate_symmetric_key(self, length=32):
        """
        Generates and returns a new symmetric key with length 'length'
        Defaults to 128 bits (16 byte)
        """
        self.key = ''.join(random.choice('0123456789abcdef') for _ in xrange(length))
        symmetric_key_file = open(self.key_path, 'w')
        symmetric_key_file.write(str(self.key))
        symmetric_key_file.close()
        return self.key

    def get_symmetric_key(self):
        if os.path.isfile(self.key_path):
            symmetric_key_file = open(self.key_path, 'r')
            self.key = symmetric_key_file.read()
            symmetric_key_file.close()
        else:
            self.generate_symmetric_key()

        return self.key
