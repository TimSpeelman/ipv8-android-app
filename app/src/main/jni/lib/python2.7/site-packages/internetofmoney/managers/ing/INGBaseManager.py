import base64
import json
import os

import zlib
from Crypto.PublicKey import RSA

from internetofmoney.managers.BaseManager import BaseManager
from internetofmoney.utils.ingcrypto import INGCryptor
from internetofmoney.utils.ingkeypair import INGKeyPair
from internetofmoney.utils.ingsymmetrickey import INGSymmetricKey
from internetofmoney.utils.profile import ProfileUtil
from internetofmoney.utils.srpclient import SRPClient


class INGBaseManager(BaseManager):

    def __init__(self, database, cache_dir='cache'):
        super(INGBaseManager, self).__init__(database, cache_dir=cache_dir)
        self.logged_in = False
        self.persistent_storage['registration_stage'] = 0

        self.symmetric_key = INGSymmetricKey(self.cache_dir)
        self.srp_client = SRPClient()
        self.payment_srp_client = None

        public_key_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..', 'utils', 'server-encrypt.der')
        self.server_public_key = RSA.importKey(open(public_key_file_path, 'r').read())

    def get_profile_id(self):
        """
        Return a profile id. Generate one if it does not exist.
        """
        if 'profile_id' in self.persistent_storage:
            return self.persistent_storage['profile_id']
        else:
            profile_id = ProfileUtil.generate_profile_id()
            self.persistent_storage['profile_id'] = profile_id
            self.save_storage()
            return profile_id

    def update_register_stage(self, num):
        self.persistent_storage['registration_stage'] = num
        self.save_storage()

    def decrypt_api_response(self, response):
        """
        Decrypt a response retrieved from the ING API.
        """
        json_response = json.loads(response.value.response)
        api_response = json_response["securityProxyResponseEnvelope"]["apiResponse"][7:]

        session_key = str(self.persistent_storage['session_key']).decode('hex')
        cryptor = INGCryptor(session_key)
        decoded_response = base64.b64decode(api_response)
        decrypted_decoded_response = cryptor.decrypt(decoded_response)
        return json.loads(zlib.decompress(decrypted_decoded_response))

    def get_ing_headers(self):
        return {
            'X-Capability': 'zlib;cards;sepafull;contextualbutton;ibanonly;loans;securities;plannedsavings',
            'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
            'Accept-Language': 'nl-nl',
            'Accept-Charset': 'utf-8',
            'Accept': 'application/json',
            'Proxy-Connection': 'keep-alive',
            'Connection': 'keep-alive',
            'User-Agent': 'Bankieren/3.8.0.82 CFNetwork/808.2.16 Darwin/16.3.0 iOS/10.2 platformString/iPhone_7 devLang/nl-NL prefLang/nl features/'
        }

    def get_bank_name(self):
        return 'ING'

    def get_bank_id(self):
        return 'INGB'

    @staticmethod
    def check_result_code(response):
        if "resultCode" not in response:
            return False
        return response["resultCode"] == "OK"

    @staticmethod
    def check_return_code(response):
        if "returnCode" not in response:
            return False
        return response["returnCode"] == "OK"
