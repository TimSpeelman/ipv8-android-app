from internetofmoney.tests.restapi.base_api_test import AbstractApiTest
from internetofmoney.tests.util.twisted_thread import deferred


class TestBanksEndpoint(AbstractApiTest):
    """
    This class contains tests for the banks endpoint.
    """

    @deferred(timeout=10)
    def test_register(self):
        """
        Test registration using the HTTP API
        """
        return self.do_request('banks/DUMA/register', request_type='POST',
                               post_data={}, expected_json={'registered': True})

    @deferred(timeout=10)
    def test_login_no_registration(self):
        """
        Test logging in when we have no registration using the HTTP API
        """
        self.should_check_equality = False
        return self.do_request('banks/DUMA/login', request_type='POST', expected_code=500, post_data={})

    @deferred(timeout=10)
    def test_login(self):
        """
        Test logging in using the HTTP API
        """
        self.session.managers['DUMA'].persistent_storage['registered'] = True
        return self.do_request('banks/DUMA/login', request_type='POST', expected_json={'logged_in': True})

    @deferred(timeout=10)
    def test_balance_no_registration(self):
        """
        Test fetching the balance when not registered using the HTTP API
        """
        self.should_check_equality = False
        return self.do_request('banks/DUMA/balance', expected_code=500)

    @deferred(timeout=10)
    def test_balance(self):
        """
        Test fetching the balance using the HTTP API
        """
        mgr = self.session.managers['DUMA']
        mgr.persistent_storage['registered'] = True
        return self.do_request('banks/DUMA/balance',
                               expected_json={'balance': {'available': mgr.balance, 'currency': 'EUR', 'pending': 0}})

    @deferred(timeout=10)
    def test_transactions_no_registration(self):
        """
        Test fetching the transactions when not registered using the HTTP API
        """
        self.should_check_equality = False
        return self.do_request('banks/DUMA/transactions', expected_code=500)

    @deferred(timeout=10)
    def test_transactions(self):
        """
        Test fetching the transactions using the HTTP API
        """
        mgr = self.session.managers['DUMA']
        mgr.persistent_storage['registered'] = True
        return self.do_request('banks/DUMA/transactions', expected_json={'transactions': []})

    @deferred(timeout=10)
    def test_payment_no_registration(self):
        """
        Test creating a payment when not registered using the HTTP API
        """
        self.should_check_equality = False
        return self.do_request('banks/DUMA/payment', request_type='POST', expected_code=500,
                               post_data={'amount': 5, 'destination_account': 'bla', 'description': ''})

    @deferred(timeout=10)
    def test_payment_too_large(self):
        """
        Test creating a too large payment using the HTTP API
        """
        self.should_check_equality = False
        mgr = self.session.managers['DUMA']
        mgr.persistent_storage['registered'] = True
        return self.do_request('banks/DUMA/payment', request_type='POST', expected_code=500,
                               post_data={'amount': mgr.balance + 1, 'destination_account': 'bla', 'description': ''})

    @deferred(timeout=10)
    def test_payment(self):
        """
        Test creating a payment using the HTTP API
        """
        self.should_check_equality = False
        mgr = self.session.managers['DUMA']
        mgr.persistent_storage['registered'] = True
        return self.do_request('banks/DUMA/payment', request_type='POST',
                               post_data={'amount': 1, 'destination_account': 'bla', 'description': ''})
