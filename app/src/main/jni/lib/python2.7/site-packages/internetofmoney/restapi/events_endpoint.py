import json
import os

from twisted.web import resource
from twisted.web import server


class DBEventsEndpoint(resource.Resource):
    """
    This class handles requests for events, which are read from the database.
    """

    def __init__(self, database):
        resource.Resource.__init__(self)
        self.database = database

    def render_GET(self, request):
        """
        Read and return events from the database
        """
        limit = 100
        if 'limit' in request.args:
            limit = int(request.args['q'][0])

        events = [{'timestamp': timestamp, 'level': level, 'message': message} for
                  timestamp, level, message in self.database.get_events(limit=limit)]

        return json.dumps({"events": events})


class EventsEndpoint(resource.Resource):
    """
    Important events in IoM are returned over the events endpoint. This connection is held open. Each event is
    pushed over this endpoint in the form of a JSON dictionary. Each JSON dictionary contains a type field that
    indicates the type of the event. Individual events are separated by a newline character (\n).
    """

    def __init__(self, session):
        resource.Resource.__init__(self)
        self.session = session
        self.events_requests = []

    def write_data(self, message):
        """
        Write data over the event socket if it's open.
        """
        message_str = json.dumps(message)

        if len(self.events_requests) == 0:
            return
        else:
            [request.write(message_str + '\n') for request in self.events_requests]

    def send_input_request(self, required_input):
        """
        Send a dictionary over the wire with the requested input specification.
        """
        self.write_data({"type": "input_request", "event": required_input.to_dictionary()})

    def render_GET(self, request):
        """
        .. http:get:: /events

        A GET request to this endpoint will open the event connection.

            **Example request**:

                .. sourcecode:: none

                    curl -X GET http://localhost:8085/events
        """
        def on_request_finished(_):
            self.events_requests.remove(request)

        self.events_requests.append(request)
        request.notifyFinish().addCallbacks(on_request_finished, on_request_finished)

        self.write_data({"type": "events_start", "event": {}})

        return server.NOT_DONE_YET
