import collections


class ABNChallengeParser(object):

    @staticmethod
    def parse_challenge_hex_string(hex_string):
        result_dict = {}

        index = 0
        while index < len(hex_string):
            if hex_string[index:index+6] == '000000':
                break
            tag = int(hex_string[index:index+2], 16)
            index += 2
            length = int(hex_string[index:index+4], 16)
            index += 4
            result_dict[tag] = hex_string[index:index+2*length].decode("hex")
            index += length * 2

        return result_dict

    @staticmethod
    def construct_hex_string_from_dict(dict):
        hex_string = ""
        od = collections.OrderedDict(sorted(dict.items()))
        for key, value in od.iteritems():
            key_to_hex = format(key, 'x')
            tag = key_to_hex.zfill(2) # Append zero's to the tag to fill up to a length of 2
            value_len_to_hex = format(len(value), 'x')
            tag_length = value_len_to_hex.zfill(4) # Append zero's to the tag_length to fill up to a length of 4
            value_to_hex = value.encode('hex')

            hex_string = hex_string + tag + tag_length + value_to_hex
        hex_string += ''.join(chr(0) for i in range(0, 3)).encode("hex")

        return hex_string
